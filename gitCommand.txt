git的常用命令
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

创建版本库
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

添加文件到库
$ git add readme.txt
提交文件
$ git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 
查看状态
$ git status

git diff

显示从最近到最远的提交日志
$ git log
$ git log --pretty=oneline

版本回退
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
$ git reset --hard HEAD^
HEAD is now at ea34578 add distributed

版本号没必要写全前几位就可以了
$ git reset --hard 3628164
HEAD is now at 3628164 append GPL

查看你的每一次命令
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file

丢弃工作区的修改：
git checkout -- file

把暂存区的修改撤销掉（unstage），重新放回工作区
git reset HEAD file
$ git reset HEAD readme.txt
Unstaged changes after reset:
M       readme.txt

删除文件
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
 
 
 把误删的文件恢复到最新版本
 $ git checkout -- test.txt
 
 与远程库连接
 git remote add origin https://github.com/long655113/test.git
 提交远程库
 git push -u origin master
 
 查看分支
 git branch
 
 创建dev分支，然后切换到dev分支
 $ git checkout -b dev
 
 切换回master分支
 $ git checkout master
 
 把dev分支的工作成果合并到master分支上/合并指定分支到当前分支
 $ git merge dev
 
 用带参数的git log也可以看到分支的合并情况：

$ git log --graph --pretty=oneline --abbrev-commit

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
$ git merge --no-ff -m "merge with no-ff" dev


把当前工作现场“储藏”起来
$ git stash
Saved working directory and index state WIP on dev: 6224937 add merge
HEAD is now at 6224937 add merge

查看
$ git stash list

恢复的同时把stash内容也删了：
git stash pop

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

Feature分支
创建Feature分支：
git checkout -b feature-vulcan
删除
git branch -d feature-vulcan
删除失败的话， 强制删除：
git branch -D feature-vulcan

多人协作
远程库的信息，用git remote
git push origin master	将master分支推送到远程
git clone https://github.com/long655113/learngit.git	抓取远程分支的master
git checkout -b dev origin/dev	创建远程origin的dev分支到本地